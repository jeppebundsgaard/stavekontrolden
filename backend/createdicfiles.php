<?php$dictionarydir=$relative."dictionaries/".$_SESSION["lang"]."/";$versionfile=$dictionarydir."version.txt";$oldversion=file_get_contents($versionfile);// unlink($dictionarydir.$_SESSION["lang"].'-'.$oldversion.'.oxt');// unlink($dictionarydir.$_SESSION["lang"].'-'.$oldversion.'.dic');// unlink($dictionarydir.$_SESSION["lang"].'-'.$oldversion.'.aff');$versionarr=explode(".",$oldversion);$versionarr[2]=sprintf("%03d",$versionarr[2]+1); # Microversion increased by 1$version=implode(".",$versionarr);file_put_contents($versionfile,$version);echo "<p>"._(sprintf("Version %s",$version))."</p>";$q="select * from start_definitions where lang='".$_SESSION["lang"]."' order by start_definitions";$result=$mysqli->query($q);if(!$result) $res["log"].=mysqlerror($q); else { 	while($r=$result->fetch_assoc())	{		$aff.=str_replace("___YEAR___",date("Y"),str_replace("___VERSION___",$version,$r["start_definitions"]))."\n";	}}# Get the affix classes$q="select * from affixclass ORDER BY id";$result=$mysqli->query($q);$specialaff=array();while($r=$result->fetch_assoc()){	$affixclass=$r["affixclass"];	$affixclassid=$r["id"];		$aff.="\n\n#".$r["description"];	if($affixclass=="SFX" or $affixclass=="PFX")	{			$q="select `stripchars`, `affix`, (select GROUP_CONCAT(rc.affixclassid SEPARATOR ',') from affixrule_to_affixclass rc where lang='".$_SESSION["lang"]."' and rc.affixruleid=r.`id` ORDER BY affixclassid) as affixclassids, `condition`, `morphdescr`, `replacement` from affixrule r left join morphdescr m on m.`id`=r.`morphdescrid` where r.`lang`='".$_SESSION["lang"]."' and `affixclassid`=".$affixclassid." ORDER BY r.id";// 		$res["log"].=$q;		$result2=$mysqli->query($q);		$num=$result2->num_rows;		if($num)		{			$affrules="";			while($r2=$result2->fetch_assoc())			{				$ass=$r2["affixclassids"];				$affclasses=($ass?"/".$ass:"")." ".$r2["condition"].($r2["morphdescr"]?"\t+".$r2["morphdescr"]:"");				$affrule=$affixclass." ".$affixclassid." ".$r2["stripchars"]." ".$r2["affix"].$affclasses;				if($r2["replacement"]) {					$replacement=$r2["replacement"];					$replacement=str_replace(array_keys($GLOBALS["letterclasses"]),$GLOBALS["letterclasses"],$replacement);					$replacement=preg_replace_callback("/(\w):(\w)/i",function($x) {return implode(",",range($x[1],$x[2]));},$replacement);					$replacement=str_replace(" ","",$replacement);					#print_r($replacement);					$replacement=explode(",",$replacement);					$num+=count($replacement)-1;					$affrulearr=array();					foreach($replacement as $i=>$x) $affrulearr[$i]=str_replace("#",$x,$affrule);					#print_r($affrulearr);									} else $affrulearr=array($affrule);				$affrules.="\n".implode("\n",$affrulearr);			}			$aff.="\n".$affixclass." ".$affixclassid." ".$r["crossproduct"]." ".$num.$affrules;					}	}	else {		$aff.="\n".$affixclass." ".$affixclassid;		$specialaff[$affixclass]=$affixclassid;	}}$aff=str_replace("\r\n","\n",$aff);file_put_contents($dictionarydir.$_SESSION["lang"]."-".$version.".aff",$aff);	echo '<p><a class="" href="'.str_replace("../","",$dictionarydir).$_SESSION["lang"].'-'.$version.'.aff" target="_blank">'._("Affix File Created")."</a></p>";#$q='select DISTINCT(ac.id) from affixclass ac left join affixrule ar on ar.affixclassid=ac.id where ac.lang="'.$_SESSION["lang"].'" and affixclass LIKE "COMPOUNDEND" or affix LIKE "-"';$q='select DISTINCT(ac.id) from affixclass ac left join affixrule ar on ar.affixclassid=ac.id left join affixrule_to_affixclass arac on arac.affixruleid=ar.id left join affixclass aac on aac.id=arac.affixclassid where ac.lang="'.$_SESSION["lang"].'" and (aac.affixclass LIKE "COMPOUNDEND")';// or affix LIKE "-")';$result=$mysqli->query($q);if(!$result) $log.=mysqlerror($q); else $r=$result->fetch_all();$affixclassesacceptedinstrong=call_user_func_array('array_merge',$r);$q='select word, strong_declension, omitsuggestion, misspellings, (select GROUP_CONCAT(wa.affixclassid SEPARATOR ",") from wordclass_to_affixclass wa where wa.wordclassid=w.wordclass) as affixclasses, (select GROUP_CONCAT(fa.affixclassid SEPARATOR ",") from  fugeelement_to_affixclass fa where fa.fugeelementid=w.fugeelementid) as fugeelementaffixclasses from words w where w.lang="'.$_SESSION["lang"].'" and wordstatus>=2 group by w.id order by word';#echo $q;$result=$mysqli->query($q);$num=$result->num_rows;if(!$result) $log.=mysqlerror($q); else {	while($r=$result->fetch_assoc())	{		$word=(strpbrk($r["word"],"/")?'"'.$r["word"].'"':$r["word"]);		$dicgrp="";		$als="";		if($r["strong_declension"])		{			$strong=explode(",",str_replace(" ","",$r["strong_declension"]));			$strongarr=array_diff($strong,array($r["word"]));			if(count($strongarr)>0) { 				$num+=count($strong);				$endslash="";//implode(",",array_intersect(explode(",",$r["affixclasses"]),$affixclassesacceptedinstrong));//  				echo $r["word"]."/".$endslash."<br>";				foreach($strongarr as $s) {					$als.=" al:".$s;					$dicgrp.=$s.($endslash?"/".$endslash:"")." st:".$word."\n";				}			}		}		$dic.=$word.($r["affixclasses"]?"/".$r["affixclasses"]:"").($r["fugeelementaffixclasses"]?($r["affixclasses"]?",":"/").$r["fugeelementaffixclasses"]:"").($r["omitsuggestion"]?(($r["affixclasses"] or $r["fugeelementaffixclasses"])?",":"/").$specialaff["NOSUGGEST"]:"")			.($r["misspellings"]?" ph:".preg_replace("/, */"," ph:",$r["misspellings"]):'').$als; 		$dic.="\n";		$dic.=$dicgrp;	}	}$result=$mysqli->query('select id from affixclass where lang="'.$_SESSION["lang"].'" and affixclass LIKE "FORBIDDENWORD"');if(!$result) $log.=mysqlerror($q); else $r=$result->fetch_assoc();$forbidden=$r["id"];$result=$mysqli->query('select unaccepted_word from unaccepted_word where lang="'.$_SESSION["lang"].'"');if(!$result) $log.=mysqlerror($q); else {	while($r=$result->fetch_assoc())	{		$unaccept=explode(",",str_replace(" ","",$r["unaccepted_word"]));		$num+=count($unaccept);		$dic.=implode("/".$forbidden."\n",$unaccept)."/".$forbidden."\n"; 	}}$dic=preg_replace("/(?sim)^([^\n\r]*?\/[a-zæøå][a-zæøå0-9]*)[\/\n]/","\"\\1\"",str_replace("\r\n","\n",str_replace(",,",",",$dic)));$dic=$num." # Produced By Stavekontrolden.dk\n".$dic; file_put_contents($dictionarydir.$_SESSION["lang"]."-".$version.".dic",$dic);	echo '<p><a class="" href="'.str_replace("../","",$dictionarydir).$_SESSION["lang"].'-'.$version.'.dic" target="_blank">'._("Word List Created")."</a></p>";$tables=array("affixclass","affixrule","affixrule_to_affixclass","fugeelement","fugeelement_to_affixclass","morphdescr","organizations","start_definitions","technical_term","unaccepted_word","wordclass","wordclass_to_affixclass","words","wordstatus");if(!file_exists($dictionarydir.'tables')) {	mkdir($dictionarydir.'tables');	file_put_contents($dictionarydir.'tables/.htaccess',"Options +Indexes");}foreach($tables as $table) {	unlink($dictionarydir.'tables/´'.$table.'.csv');	$q='select * from '.$table.' where lang="'.$_SESSION['lang'].'"';	#"/var/www/stavekontrolden/dictionaries/'.$_SESSION["lang"].'/tables/'.$table.'.csv" ;	$result=$mysqli->query($q);// 	$fields=$result->fetch_fields();	$r=$result->fetch_assoc(); 	$keys=array_keys($r);	$delimiter="\t";	$export=implode($delimiter,$keys)."\n";	$fp = fopen($dictionarydir.'tables/'.$table.'.csv', 'w');	fwrite($fp,$export);	do {		//$export.="\n";		fputcsv($fp,$r,$delimiter);// 		for($i=0;$i<count($r);$i++) // 			$export.=($i>0?"\t":"").($fields[$i]->type>=252?'"':'').($r[$keys[$i]]).($fields[$i]->type>=252?'"':'');	} while ($r=$result->fetch_assoc());	fclose($fp);// 	file_put_contents($dictionarydir.'tables/'.$table.'.csv',$export);}$oxtfiles=$dictionarydir."oxt-files/";file_put_contents($oxtfiles."README_".$_SESSION["lang"].".txt",preg_replace("/Version.*?\n/","Version $version - ".date("d-m-Y")."\n",file_get_contents($oxtfiles."README_".$_SESSION["lang"].".txt")));file_put_contents($oxtfiles."description.xml",preg_replace("/<version value=\".*?\"/","<version value=\"".date("Y.m.d")."\"",file_get_contents($oxtfiles."description.xml"))); copy($dictionarydir.$_SESSION["lang"]."-".$version.".aff",$oxtfiles.$_SESSION["lang"].".aff");copy($dictionarydir.$_SESSION["lang"]."-".$version.".dic",$oxtfiles.$_SESSION["lang"].".dic");// ExampleExtendedZip::zipTree($oxtfiles, $dictionarydir.$_SESSION["lang"].'-'.$version.'.oxt', ZipArchive::CREATE);echo '<p>Packed! </p><a class="btn btn-success" href="'.str_replace("../","",$dictionarydir).$_SESSION["lang"].'-'.$version.'.oxt" target="_blank">'._('Download Extension').'</a>';echo $log;class ExtendedZip extends ZipArchive {    // Member function to add a whole file system subtree to the archive    public function addTree($dirname, $localname = '') {        if ($localname)            $this->addEmptyDir($localname);        $this->_addTree($dirname, $localname);    }    // Internal function, to recurse    protected function _addTree($dirname, $localname) {        $dir = opendir($dirname);        while ($filename = readdir($dir)) {            // Discard . and ..            if ($filename == '.' || $filename == '..')                continue;            // Proceed according to type            $path = $dirname . '/' . $filename;            $localpath = $localname ? ($localname . '/' . $filename) : $filename;            if (is_dir($path)) {                // Directory: add & recurse                $this->addEmptyDir($localpath);                $this->_addTree($path, $localpath);            }            else if (is_file($path)) {                // File: just add                $this->addFile($path, $localpath);            }        }        closedir($dir);    }    // Helper function    public static function zipTree($dirname, $zipFilename, $flags = 0, $localname = '') {        $zip = new self();        $zip->open($zipFilename, $flags);        $zip->addTree($dirname, $localname);        $zip->close();    }}